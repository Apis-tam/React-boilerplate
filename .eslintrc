{
  "extends": [
    "plugin:react-hooks/recommended",
    "plugin:react/recommended",
    "plugin:import/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint", "jsx-a11y"],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  },
  "rules": {
    "react/display-name": "off",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "{}": false,
          "[]": false
        }
      }
    ],
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "args": "none",
        "ignoreRestSiblings": true,
        "destructuredArrayIgnorePattern": "[A-Z]",
        "caughtErrors": "none"
      }
    ],
    "jsx-a11y/anchor-is-valid": [
      "error",
      {
        "components": ["Link"],
        "specialLink": ["preventDefault", "to"],
        "aspects": ["noHref", "invalidHref", "preferButton"]
      }
    ],
    "@typescript-eslint/indent": "off",
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        }
      }
    ],
    "generator-star-spacing": [
      1,
      {
        "before": false,
        "after": true
      }
    ],
    "import/prefer-default-export": 0,

    "lines-between-class-members": [
      "error",
      "always",
      {
        "exceptAfterSingleLine": true
      }
    ],
    "max-len": [
      "error",
      {
        "code": 140
      }
    ],
    "no-console": [
      "warn",
      {
        "allow": ["warn"]
      }
    ],
    "no-underscore-dangle": [
      "error",
      {
        "allow": ["__REDUX_DEVTOOLS_EXTENSION__"]
      }
    ],
    "object-curly-spacing": ["error", "always"],
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "*", "next": "return" }
    ],
    "padded-blocks": [
      1,
      {
        "blocks": "never",
        "classes": "never"
      }
    ],
    "react/jsx-max-props-per-line": [
      1,
      {
        "maximum": 1,
        "when": "multiline"
      }
    ],
    "react/jsx-props-no-spreading": 0,
    "react/jsx-sort-props": [
      1,
      {
        "callbacksLast": true,
        "shorthandLast": true,
        "ignoreCase": true,
        "noSortAlphabetically": true,
        "reservedFirst": true
      }
    ],
    "react/jsx-key": 2,
    "react/static-property-placement": ["error", "static public field"],
    "space-in-parens": [1, "never"],
    "jsx-a11y/click-events-have-key-events": 0,
    "react/button-has-type": 0,
    "jsx-a11y/label-has-for": 0,
    "jsx-a11y/label-has-associated-control": "off",
    "react/react-in-jsx-scope": "off",
    "react/sort-comp": [
      "error",
      {
        "order": [
          "static-variables",
          "static-methods",
          "instance-variables",
          "lifecycle",
          "/^on.+$/",
          "getters",
          "setters",
          "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
          "instance-methods",
          "everything-else",
          "rendering"
        ],
        "groups": {
          "lifecycle": [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "getInitialState",
            "state",
            "getChildContext",
            "getDerivedStateFromProps",
            "componentWillMount",
            "UNSAFE_componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "UNSAFE_componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "UNSAFE_componentWillUpdate",
            "getSnapshotBeforeUpdate",
            "componentDidUpdate",
            "componentDidCatch",
            "componentWillUnmount"
          ],
          "rendering": ["/^render.+$/", "render"]
        }
      }
    ]
  },
  "overrides": [
    {
      "files": ["**/*.tsx"],
      "rules": {
        "react/prop-types": "off",
        "react/require-default-props": "off"
      }
    }
  ],
  "env": {
    "browser": true,
    "jest": true
  }
}
